diff --git a/cookieinformation.libraries.yml b/cookieinformation.libraries.yml
new file mode 100644
index 0000000..272d973
--- /dev/null
+++ b/cookieinformation.libraries.yml
@@ -0,0 +1,9 @@
+iframes:
+  js:
+    js/iframes.js: {}
+  dependencies:
+    - core/jquery
+    - core/drupal
+consent_mode:
+  js:
+    js/consent_mode.js: {}
diff --git a/cookieinformation.module b/cookieinformation.module
index 8e8f8d7..72d2a58 100644
--- a/cookieinformation.module
+++ b/cookieinformation.module
@@ -48,4 +48,27 @@ function cookieinformation_page_attachments_alter(array &$page) {
     ],
   ];
   $page['#attached']['html_head'][] = [$cookie_popup, 'cookieinformation.ucjs'];
+
+  if (!empty($config->get('block_iframes'))) {
+    $page['#attached']['library']['cookieinformation/iframes'] = 'cookieinformation/iframes';
+  }
+
+  $module_path = drupal_get_path('module', 'cookieinformation');
+  $js_path = $module_path . '/js/consent_mode.init.js';
+  $js_url = file_url_transform_relative(file_create_url($js_path));
+
+  $consent_mode_init_script = [
+    '#type' => 'html_tag',
+    '#tag' => 'script',
+    '#attributes' => [
+      'type' => 'text/javascript',
+      'id' => 'ConsentMode',
+      'src' => $js_url,
+    ],
+    '#weight' => -200,
+  ];
+  if (!empty($config->get('enable_google_consent_mode'))) {
+    $page['#attached']['html_head'][] = [$consent_mode_init_script, 'consent_mode_init_script_key'];
+    $page['#attached']['library']['cookieinformation/sdk'] = 'cookieinformation/consent_mode';
+  }
 }
diff --git a/js/consent_mode.init.js b/js/consent_mode.init.js
new file mode 100644
index 0000000..a818397
--- /dev/null
+++ b/js/consent_mode.init.js
@@ -0,0 +1,10 @@
+window.dataLayer = window.dataLayer || [];
+function gtag() {
+  dataLayer.push(arguments);
+}
+gtag('consent', 'default', {
+  'ad_storage': 'denied',
+  'analytics_storage': 'denied',
+  'wait_for_update': 500,
+});
+gtag('set', 'ads_data_redaction', true);
diff --git a/js/consent_mode.js b/js/consent_mode.js
new file mode 100644
index 0000000..cc72bdf
--- /dev/null
+++ b/js/consent_mode.js
@@ -0,0 +1,8 @@
+window.addEventListener('CookieInformationConsentGiven', function (event) {
+  if (CookieInformation.getConsentGivenFor('cookie_cat_statistic')) {
+    gtag('consent', 'update', {'analytics_storage': 'granted'});
+  }
+  if (CookieInformation.getConsentGivenFor('cookie_cat_marketing')){
+    gtag('consent', 'update', {'ad_storage': 'granted'});
+  }
+}, false);
\ No newline at end of file
diff --git a/js/iframes.js b/js/iframes.js
new file mode 100644
index 0000000..9a3bce2
--- /dev/null
+++ b/js/iframes.js
@@ -0,0 +1,105 @@
+/**
+ * @file
+ * Hides iframes and disable ReadSpeaker buttons when functional cookies are not accepted.
+ */
+
+ (function ($, Drupal) {
+    'use strict';
+
+    Drupal.behaviors.cookie_information_iframes = {
+      attach: function (context) {
+        // Add a consent message after each iframe 
+        // and show it if the cookie consent is not accepted
+        $('iframe', context).not('[data-tampere-cookie-information="skip"]').each(function () {
+          $(this).attr('data-consent-src', $(this).attr('data-src'));
+          $(this).attr('data-category-consent', 'cookie_cat_functional');
+          $(this).removeAttr('data-src');
+  
+          var consent_given = CookieInformation.getConsentGivenFor('cookie_cat_functional');
+          var display_style = consent_given ? 'none' : 'none';
+          $(this).after(
+            '<div class="consent-placeholder" data-category="cookie_cat_functional" style="display: ' + display_style + '">'
+            + '<p class="consent-placeholder__text">'
+            + Drupal.t(
+              "Unfortunately you are not able to view this content since you haven't accepted functional cookies. You can accept cookies by clicking the Renew consent icon at the bottom left corner of the website or on the Accept cookies button below.",
+              {},
+              { context: 'Cookie information' },
+            )
+            + '</p><button class="consent-placeholder__button" onClick="CookieConsent.renew()">'
+            + Drupal.t('Accept cookies', {}, { context: 'Cookie information' })
+            + '</button></div>',
+          );
+        });
+  
+        // Create a copy from ReadSpeaker buttons without the play link to prevent user from palying 
+        // and create a consent button if there is at least one embed iframe.
+        $('iframe', context).not('[data-tampere-cookie-information="skip"]').each(function () {
+          var iframe_is_type_of_embed_iframes = $(this).parent().hasClass('embed-id');
+          if (iframe_is_type_of_embed_iframes) {
+            var consent_given = CookieInformation.getConsentGivenFor('cookie_cat_functional');
+            if (!consent_given) {
+              $('#readspeaker_button').after(
+                '<div' 
+                + ' class="rsbtn rsbtn_text rs_preserve mega_toggle" id="readspeaker_button_copy" style="">'
+                + '<a class="rsbtn_play" href="#"></a></div>'
+                );
+              $('#readspeaker_button a').children().clone().appendTo('#readspeaker_button_copy a');
+
+              // Display the correct ReadSpeaker version
+              $('#readspeaker_button').css('display', consent_given ? 'block' : 'none');
+              $('#readspeaker_button_copy').css('display', consent_given ? 'none' : 'block');
+              
+              $('#readspeaker_button_copy').parent().after(
+                '<div id="readspeaker_consent_placeholder" style="display: none;">' 
+                + '<button ' 
+                + 'aria-label="' + Drupal.t(
+                  "Accept cookies in order to listen to the page with ReadSpeaker",
+                  {},
+                  { context: 'Cookie information' },
+                ) + '" '
+                + 'style="outline-style: solid; outline-color: blue; outline-width: 0;" id="readspeaker_consent_button" class="consent-placeholder" data-category="cookie_cat_functional" onClick="CookieConsent.renew()">'
+                + Drupal.t('Accept cookies', {}, { context: 'Cookie information' })
+                + '</button>'
+                + '</div>'
+                + '<style type="text/css"> #readspeaker_consent_placeholder button:focus{ border-color: blue;} </style>'
+              );
+            }
+          
+          // No need to repeat it for the rest of iframes
+          return false;
+          }
+        });
+
+        // Hide the fake ReadSpeaker buttons as soon as the consent gets accepted.
+        $(window).on('CookieInformationConsentGiven', function (event) {
+          if (CookieInformation.getConsentGivenFor('cookie_cat_functional')){
+            $('#readspeaker_button').css('display', 'block');
+            $('#readspeaker_button_copy').css('display', 'none');
+          }
+        })
+
+        // When ReadSpeaker block gets clicked, show the consent 
+        // button if the cookie consent is not accepted.
+        $('#readspeaker_button_copy').click(function (e) {
+          if (!CookieInformation.getConsentGivenFor('cookie_cat_functional')){
+            $('#readspeaker_consent_placeholder').css('display', 'block');
+            $('#readspeaker_button_copy').parent().css('float', 'right');
+            $("#readspeaker_consent_placeholder button").focus();
+          }
+
+          // Prevent unwanted actions from ReadSpeaker
+          return false;
+        });
+
+        // Clear data-rsevent-id created by ReadSpeaker plugin
+        $('#readspeaker_button_copy a').click(function (e) {
+          $('#readspeaker_button_copy a').attr('data-rsevent-id', '');
+        });
+
+        $("#readspeaker_button_copy").on("keyup", function(e) { 
+          if(e.keyCode == 13)
+              $("#readspeaker_button_copy").click()
+        });
+      },
+    };
+  }(jQuery, Drupal));
diff --git a/src/Form/CookieInformationSettingsForm.php b/src/Form/CookieInformationSettingsForm.php
index 6d643da..972bb67 100644
--- a/src/Form/CookieInformationSettingsForm.php
+++ b/src/Form/CookieInformationSettingsForm.php
@@ -76,6 +76,18 @@ class CookieInformationSettingsForm extends ConfigFormBase {
         ],
       ],
     ];
+    $form['block_iframes'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Block iframes'),
+      '#description' => $this->t('Check to block iframes when user has not accepted functional cookies'),
+      '#default_value' => $this->config->get('block_iframes'),
+    ];
+    $form['enable_google_consent_mode'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Enable google consent mode'),
+      '#description' => $this->t('Check to enable Google consent mode.'),
+      '#default_value' => $this->config->get('enable_google_consent_mode'),
+    ];
     $form['visibility'] = [
       '#type' => 'fieldset',
       '#title' => $this->t('Cookie Information consent popup visibility'),
@@ -124,6 +136,8 @@ class CookieInformationSettingsForm extends ConfigFormBase {
     parent::submitForm($form, $form_state);
     $this->config->set("enable_popup", $form_state->getValue('enable_popup'));
     $this->config->set("enable_iab", $form_state->getValue('enable_iab'));
+    $this->config->set("block_iframes", $form_state->getValue('block_iframes'));
+    $this->config->set("enable_google_consent_mode", $form_state->getValue('enable_google_consent_mode'));
     $this->config->set('exclude_paths', $form_state->getValue('exclude_paths'));
     $this->config->set('exclude_admin', $form_state->getValue('exclude_admin'));
     $this->config->set('exclude_uid_1', $form_state->getValue('exclude_uid_1'));
