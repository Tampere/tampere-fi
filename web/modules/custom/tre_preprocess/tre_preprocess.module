<?php

/**
 * @file
 * Contains hook implementations for tre_preprocess module.
 */

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\RevisionableStorageInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_build().
 */
function tre_preprocess_views_pre_build(ViewExecutable $view) {
  $view_name = $view->id();

  switch ($view_name) {
    case 'current_content_archive':
      return _tre_preprocess_views_pre_build_current_content_archive($view);

    case 'search':
      return _tre_preprocess_views_pre_build_search($view);

  }

}

/**
 * Helper for hook_views_pre_view().
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view to alter.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _tre_preprocess_views_pre_build_search(ViewExecutable $view) {
  if (isset($view->args[0]) && $view->args[0] !== 'all') {
    $title = _tre_preprocess_minisite_search_title();
    $view->getDisplay()->setOption('title', $title);
    $view->setTitle($title);
    $route = \Drupal::service('current_route_match')->getRouteObject();
    // Sets <head><title>.
    $route->setDefault('_title_callback', function () use ($title) {
      return $title;
    });

  }
  return TRUE;
}

/**
 * Helper for the title of the minisite search page.
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 *   The translated title for the minisite search page.
 */
function _tre_preprocess_minisite_search_title(): TranslatableMarkup {
  $title = new TranslatableMarkup('Search results');
  return $title;
}

/**
 * Helper for hook_views_pre_view().
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view to alter.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _tre_preprocess_views_pre_build_current_content_archive(ViewExecutable $view) {
  if (!isset($view->args[0])) {
    return _tre_preprocess_reset_views_args($view);
  }

  $paragraph_revision_id = $view->args[0];
  if (empty($paragraph_revision_id)) {
    return _tre_preprocess_reset_views_args($view);
  }

  $paragraph = _tre_preprocess_get_paragraph_by_revision((int) $paragraph_revision_id);
  if (!($paragraph instanceof ParagraphInterface)) {
    return _tre_preprocess_reset_views_args($view);
  }

  if ($paragraph->bundle() !== 'current_listing') {
    return _tre_preprocess_reset_views_args($view);
  }

  $translated_paragraph = \Drupal::service('entity.repository')->getTranslationFromContext($paragraph);

  $current_language_id = \Drupal::service('language_manager')->getCurrentLanguage()->getId();
  [$node_ids] = \Drupal::service('preprocess.plugin.manager')->createInstance('tre_preprocess.preprocess.paragraph__current_listing')->getNodeIdsForCurrentListingParagraph($translated_paragraph, $current_language_id, FALSE);

  if (empty($node_ids)) {
    return _tre_preprocess_reset_views_args($view);
  }

  $view->setArguments([implode('+', $node_ids)]);
}

/**
 * Gets a paragraph based on its revision ID.
 *
 * @param int $paragraph_revision_id
 *   The revision ID.
 *
 * @return \Drupal\paragraphs\ParagraphInterface|null
 *   The paragraph or null if not found.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _tre_preprocess_get_paragraph_by_revision(int $paragraph_revision_id): ?ParagraphInterface {
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraph = NULL;
  if ($paragraph_storage instanceof RevisionableStorageInterface) {
    $paragraph = $paragraph_storage->loadRevision($paragraph_revision_id);
  }

  return $paragraph instanceof ParagraphInterface ? $paragraph : NULL;
}

/**
 * Helper function to reduce repetition.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view whose arguments must be reset.
 *
 * @return null
 *   Nothing returned.
 */
function _tre_preprocess_reset_views_args(ViewExecutable $view) {
  $view->setArguments([]);
  return NULL;
}

/**
 * Implements hook_language_switch_links_alter().
 */
function tre_preprocess_language_switch_links_alter(array &$links, $type, Url $url) {
  // Nifty trick to prevent altering links for other than current page.
  if ($url->getRouteName() !== '<current>' && $url->getRouteName() !== '<front>') {
    return;
  }

  /** @var \Drupal\Core\Routing\RouteMatchInterface $routematch */
  $routematch = \Drupal::routeMatch();
  $current_route = $routematch->getRouteName();
  $route_params = $routematch->getParameters()->all();

  $archive_routes = _tre_preprocess_get_current_archive_routes();

  if (!in_array($current_route, $archive_routes, TRUE)) {
    return;
  }

  foreach ($links as $langcode => $link) {
    // Remove query parameters from link altogether. In this case this makes us
    // get rid of the page parameter which may be off by dozens of pages
    // depending on language.
    $link['query'] = [];
    // The route parameters contain the view argument.
    $link['url'] = Url::fromRoute($archive_routes[$langcode], $route_params);
    $links[$langcode] = $link;
  }
}

/**
 * Helper to list the current content archive routes.
 *
 * @return string[]
 *   The routes for the archive view, keyed by language.
 */
function _tre_preprocess_get_current_archive_routes(): array {
  $archive_routes = [
    'fi' => 'view.current_content_archive.current_content_archive_fi',
    'en' => 'view.current_content_archive.current_content_archive_en',
  ];
  return $archive_routes;
}

/**
 * Implements hook_system_breadcrumb_alter().
 *
 * @see \Drupal\tre_preprocess\Plugin\Preprocess\CurrentListing::preprocess()
 */
function tre_preprocess_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  // Handle minisite search breadcrumb. For some reason altering the view's
  // title (even in hook_views_pre_view) has no effect on breadcrumb, only on
  // the title of the page. The 'search' view has a contextual filter
  // ('argument') named %group which can be accessed by name as a route
  // parameter.
  $view_id = $route_match->getParameter('view_id');
  $group = $route_match->getParameter('group');

  if ($view_id === 'search' && $group !== 'all') {
    foreach ($breadcrumb->getLinks() as $link) {
      if ($link->getText() === 'Hakutulokset Tampere.fi:stÃ¤' || $link->getText() === 'Search results from Tampere.fi') {
        $link->setText(_tre_preprocess_minisite_search_title());
      }
    }
    return;
  }

  // Handle current_archive view breadcrumbs.
  $text = NULL;
  $url = NULL;
  // Because the original breadcrumb's links cannot be switched, we need to
  // build a new one from scratch.
  $new_breadcrumb = new Breadcrumb();
  $breadcrumb_altered = FALSE;

  if (in_array($route_match->getRouteName(), _tre_preprocess_get_current_archive_routes(), TRUE)) {
    // The arg_0 exists for the view when the view has been accessed through its
    // page URL with a paragraph ID set.
    $paragraph_revision_id = $route_match->getParameter('arg_0');
    if (!empty($paragraph_revision_id)) {
      $paragraph = _tre_preprocess_get_paragraph_by_revision((int) $paragraph_revision_id);
      if ($paragraph instanceof ParagraphInterface) {
        $host_entity = $paragraph->getParentEntity();
        if ($host_entity instanceof NodeInterface) {
          $translated_host_entity = \Drupal::service('entity.repository')->getTranslationFromContext($host_entity);
          $text = $translated_host_entity->label();
          $url = $translated_host_entity->toUrl();
          $new_breadcrumb->addCacheableDependency($translated_host_entity);
          $new_breadcrumb->addCacheableDependency($paragraph);
        }
      }
    }
  }

  if (!is_null($text) && !is_null($url)) {
    $breadcrumb_altered = TRUE;
    foreach ($breadcrumb->getLinks() as $link) {
      if (in_array($link->getUrl()->getRouteName(), _tre_preprocess_get_current_archive_routes(), TRUE)) {
        $link = Link::fromTextAndUrl($text, $url);
      }
      $new_breadcrumb->addLink($link);
    }
    $new_breadcrumb->addCacheTags($breadcrumb->getCacheTags());
    $new_breadcrumb->addCacheContexts($breadcrumb->getCacheContexts());
  }

  if ($breadcrumb_altered) {
    $breadcrumb = $new_breadcrumb;
  }
}

/**
 * Implement hook_node_presave().
 *
 * @param NodeInterface $node
 * @return void
 */
function tre_preprocess_node_presave (NodeInterface $node) {
  if ($node->hasField('field_partial_ingress')) {
    _tre_preprocess_generate_partial_ingress($node);
  }
}

/**
 * Generate value for partial ingress field from ingress.
 *
 * @param NodeInterface $node
 * @return void
 */
function _tre_preprocess_generate_partial_ingress (NodeInterface $node) {
  $ingress = NULL;
  if ($node->hasField('field_lead') && !$node->get('field_lead')->isEmpty()) {
    $ingress = $node->get('field_lead')->value;
  }
  // If there is field_description_toggle set true,
  // use field_description_formatted instead of field_description.
  else {
    if ($node->hasField('field_description_toggle') && $node->get('field_description_toggle')->value) {
      if ($node->hasField('field_description_formatted') && !$node->get('field_description_formatted')->isEmpty()) {
        $ingress = $node->get('field_description_formatted')->value;
      }
    }
    else {
      if ($node->hasField('field_description') && !$node->get('field_description')->isEmpty()) {
        $ingress = $node->get('field_description')->value;
      }
    }
  }

  if (!$ingress || strlen($ingress) === 0) {
    return;
  }

  // Get the first sentence of the ingress that is
  // followed by empty space and a capitalized letter.
  $matches = [];
  $first_sentence = preg_match('/(^.*?[a-z]{2,}[.!?])\s+\W*[A-Z]/', $ingress, $matches, PREG_OFFSET_CAPTURE);
  if ($first_sentence) {
    $partial_ingress = $matches[1];
    $node->set('field_partial_ingress', $partial_ingress);
  }
  // No capitalized letter after sentence etc. just return the full string.
  else {
    $node->set('field_partial_ingress', $ingress);
  }
}
